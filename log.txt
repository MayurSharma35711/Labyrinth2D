8/2/2024 
- Here we will put our progress and changes for each file (preferably in as much detail as would be helpful)
- Set up the Github repository and worked out the old Github commands
- Found the old code Calvin had worked on for setting up, so going to read through that and set it up on my own later to have ways to connect multiple people together. He likely won't mind if I grab some old aspects of it, but I'll probably double check with him anyway. 
- Added an ideas file, that I left somewhat organized.
- Spoke more in-depth with Calvin to see what his thoughts were
	- Made point that if we want to learn use C++, if we want to make a game, use Unity (scripts are in C#)
	- Also, game dev life is long and hard

(Mayur's Opinion): Let's shoot for C++. both of us already mostly know the language (i definitely have some kinks i need to work out, but I generally know the language). It will be a better learning experience, there's some overhead to learn when it comes to packages, but the skills we pick up will probably be more reusable compared to Unity (unless you're planning on becoming a game dev). Once we learn some basic graphics, the first version of the simulated game is already more or less ready as well, so it's an easy start in that regard. 
In a sense, we can learn interesting algorithms and packages and memory structures while also constantly making interesting progress that should be able to continuously build, unlike something where we know less.

8/3/2024 
- Vivek has now set up GitHub. 
- I have also set up index html file on my computer. 
- We discussed the idea with appa as well, and doing it with JS seems like the least irritating way to do things, considering we care more about learning algorithms and basic graphics than doing a bunch of nonsensical garbage.

- Got the node, npm, and http-server to all work (npx http-server for Vivek).
- To run everything, we need to first install http-server through npm to localhost things
- After we run the local host, server, it will run the index.html file in the associated directory immediately
- This will help us actually run the pixijs file, which otherwise won't work.

- the command we actually have to run is npx http-server -c-1
- this prevents the data from caching so changes can be made

8/3/2024 (night)
- Had merge issues which took ~1 hour to solve. 
- all following algorithms have variable length, width
- Created biome generation using random walk algorithm (vivek)
	- number of biomes is variable and fills in background with plains
- fixed graphics from old code (mayur)
	- can change color of each square independently and tinker with size of squares and size of fitting into computer screen
	- (CONCERN) need to make sure that having this many objects doesn't slow things down
- maze generation using random DFS algorithm to visit every cell (mayur)

- next steps 
	- fix the dependencies issue (vivek)
	- once this works, we can make the background graphics quickly (mayur)
		- see how efficient / fast this is, if slow, have problem
	- start character + equipment design and art (vivek)
8/4/24 (basement)
- Fixed dependencies
	- https://stackoverflow.com/questions/950087/how-do-i-include-a-javascript-file-in-another-javascript-file
	- make all .js files .mjs except the main file then, from the .mjs export the functions you want 
	- to use in the main function. To import use "import {somefunction} from "./somefile.mjs"
- Fixed graphics for biome generation
	- Talked about Long term game dev with respect to amount of objects rendered
- Fixed graphics for maze generation

- next steps
	- start game loop
	- figure out how to implement visibility
	- make a tile object (gives position, is visited (maybe?), biome, walls, etc.)
	- use this to make a map array of tile objects, which is easy to implement visibility 
		- using current position -> can get index of map array tile 
		- map array tile has biome info and wall info
		- from this get visibility info
8/5/24
- Wrote classes for player and monster
	- Implemented basic graphics for monsters and player
	- Start pos for player is in corner, monsters spawn randomly
	- Most functions have been written and have not been tested
		- All funcitons for Entities are in class Entities which is inherited by class Player and class Monsters
		- Functions include (dealDamage, takeDamage, setPos, setSpeed...)
- next steps
	- start game loop
	- make a tile object and a wall object (different)
		- using current position -> can get index of map array tile
		- from that figure out visibility (probably just range but not obstructed by walls)
	- start generating textures for biomes, players etc.

8/6/24
- Created a tile class, made map into a tile array that every function uses now 
- Put all of the biome generation into a single file that gives just a map array 
	- this effectively means we don't need map_classes, since mapgen.mjs gives all the map information
- Created a tileWall class, made walls into a tile array that every function uses now
- put all of the maze generation into a single file as well, so that should also be doesn
- all classes used for backgrounds are only instantiated in their file and so importing is unnecessary
	- the function that creates the objects is all that is required.

- side idea: if a cell has 3 walls, give it a chance to have a treasure

- next immediate steps
	- sprites and textures (monsters, players, equipment, and background)
	- update loop (movement, monster movement, screen size change)
	- keyboard input 
- steps afterwards
	- path finding for monsters / AI players
	- visibility 
	- creating equipment & statistics
	- create chests & rooms
8/7/24 (morning)
- Added movement along with detection of walls which cancels movement
	- Function name is keyStart for now it works only with arrow keys but should be easy to implement WASD
- next steps/work for tonight
	- figure out how implement gameLoop/visibility
	- Long term figure out specifics for pathfinding algorithm/Monsters and AI
8/9/24 (afternoon)
- Added rendering for biomes kind of (A new kind of rendering idea)
	- Kind of light paint where part of the  map gets unlocked everytime you move meaning that the more you move around the more you see
	- It is a basic square around the player that gets rendered
- Rendering doesn't work for walls yet
8/9/24 (early evening)
- Find a bug in rendering
	- When moving up or to the left it has trouble rendering this is because of just adding to the index and not subtracting
- If we add the rendering idea from before then there is no point in adding the visited attribute to tiles

8/10/24
- Vivek worked on chests
- Mayur screwed up graphics and then reverted things to an older commit

8/11/24
- the entity classes need to be updated to work better with graphics code
	- we currently have 2 positions, the rectangle and the object position
- organizationally, we probably want a file that does all the map updates using just the index of each object within the map
- these objects should then be wrapped into a single array giving map items
- we then have our visibility file which draws the map tiles and walls which are visible and then the items and objects on it as well
- this will require the following
	- updates to the current classes, so that the super class has a drawMe function
		- the function should then use the provided texture to produce the actual image

- currently wrote up a few visibility methods to give the party's seen tiles at any time
	- cannot test it without modified graphics code as well though

8/15/24 (night future plans)
- Get visibility to work with the maze
- Get everything streamlined
- Larger Biomes
- Pathfinding

8/16/24
- Got visibility to work with multiple players
- Got maze to work with visibility
	- made wall tiles with border
	- got left and top walls to work
- added user input for multiple players
	- can change current player by clicking their corresponding number
	- cannot move through walls 
	- if player is out of captain's visibility
		- they can't move and their visibility disappears
		- they are still visible on the screen so that you can find them though
		- screen center also changes to only active players
- biome sizes look fine the way they are 
- map tiles, maze tiles, and players all have drawMe
	- have 1 container for map
	- have another container for maze
	- will make container for player

- mayur will see if he can write A* algorithm at some point
	- sample heuristic functions
		- L_1 norm: x+y
		- L_infty norm: max( x,y)
		- L_2 norm squared: x^2 + y^2
		- L_2 norm: sqrt(x^2 + y^2)
		- function1: xy/2
		- function2: sqrt(x^2+y^2)*(x+y)
		- function3: (x+y) + xy/9
		- function4: (x+y) + xy/4
- vivek will do rooms 

- Check with nikki for her thoughts

8/17/24 (early morning)
- Mayur got path finding to work completely with many different heuristics
	- every single case was equivalent to dijkstra
		- this is likely a result of the maze not really having a sense of directionality
		- the point of the heuristic is to give an estimate of how far away you are
		- but, if the maze is random, there is no such function for large mazes and at small mazes, the path found is trivial
- decided to make a modification to the maze generation to take out some number of maze tiles 
	- thought this could distinguish path finding (it didn't)
	- however, it also means there are loops in the maze, which didn't exist earlier

- to ensure path finding is still efficient, we shoudl probably do the following
	- low tier monsters just go in the direction of the player if possible
	- slightly higher tier monsters do the same, but they prefer to move in groups
	- for path finding we split up the map into sectors 
		- each sector has a representative tile which we use for path finding
			- using these representative paths, the monsters go to the sector they choose to go to
		- mid tiers will try to go towards the players and fight them 
		- different higher tiers will either go towards the player or get between the player and a room
	
8/18/24
- Vivek implemented chests with a chest open and chest closed texture
- Vivek implemented a beta for room generation in the maze
- Next things he has to do 
	- prevent room overlapping
		- multirooms should 
			- first generate each of the room sizes and the room starting point
			- check if there is overlapping immediately and if so, recorrect
			- then call the room generation code
	- prevent spots from being unreachable
		- check the maze code and run a similar BFS for it without deleting maze walls unless necessary
- Put a thing in the wall class isDoor
	- This is for extra biomes (dungeons, shop, rest areas, etc.)
	- These can open
8/23/24
- We fixed the maze after adding rooms
	- All parts of the maze can be reached from the starting position
	- Added extra walls
- We added zooming in and out
	- Also added center of screen moving up, down, left, and right
next steps

- Think about how to implement turns
- Monster AI
- Combat

8/24/24
- Made a sector indexing dictionary
	- can use this saved data for large map path-finding
	- shorter regions will still use A* just to get through the maze
- Made path-finding dictionary between sectors
	- had loop issue; fixed it as well

- next things to do
	- vivek
		- set up turns 
		- clean up vis_updated
			- map gen, maze gen, rooms, chests can be made into a background_init()
		- clean up rooms 
			- maze_check and functions it calls go in their own file
	- mayur
		- node A* function
		- monster AI

8/28/24
- spoke with manthan
	- perhaps put loops in how the level backgrounds are generated
		- plains -> water or desert as neighbors
		- water -> snowy or muddy as neighbors
		- only put this in if infinite levels or level loop
	- add in items related to lore
		- these could have special effects and add to collectibles in games
		- sub-boss that runs around map 
			- when defeated shows where you have been
	- strict improvement of weapon and armor systems doesn't make sense
		- however, make it so that higher tiers are more generally useful
		- lower tier items might require to rest a turn
	- good traps could be nice
		- stop player from moving for 1 or 2 turns
		- bomb on tile
		- laser that goes down tile
	- checkout pixel dungeon and grim tides (both free) and spelunky 2 (not free)
	- track usage of items for sake of statistics and how to balance
		- play rate and win rate
	- slightly gray out visibility of players a,b,c when controlling player d
		- this will prevent you from losing them accidentally
	- when you die, rather than keep your inventory
		- keep them as blueprints which you can craft
			- given you have the money and, if S tier, you have items
		- however, you can start with B or C tier of that item 

9/11/24

- Didn't write in log for a while
- Some stuff may not just be today

- Drew up flowchart for Monster AI and worked out many mechanics for it

- Combat
	- A shaded square shows you where you are going to heuristic
		- It is supposed to stay within you range
		- If you miss the hit your combat ends early
			- You can click "n" again to attack
		- Your range is shaded
	- It has wall detection as in if your attack would be impossible due to a wall it is
	- Player class modifications
		- str_atk tells you whether your character can only attack in a str line
		- in_combat tells you whether your charater is in combat
		- To come
			- hit tells you whether your character has already succesfully hit

- next steps
	- make the player's screen look nicer
		- make the combat range viewer ignore or not ignore walls based on the weapon
	- modulize the code better and potentially make new folders for this
	- start working on different weapon implementation
		- sword
		- gun 
		- bomb 
		- hammer (causes damage through walls with AOE)
		- ghost sword (sword but ignores walls)
	- stat menu
	- monster AI implementation

9/12/2024 
- modulize vis_updated
	- the result genuinely looks pretty good right now
	- however, the code steps are very ugly
	- sight, inrange, etc. can be made their own files, and vis_updated needs to be cleaned
	- the directory also needs to be made way cleaner
	- note to vivek: if a function is important, give it its own file or group with other things in a new file
- combat stuff
	- don't highlight if through a wall
	- need to configure how bombs / monsters / players would work in the way of combat
- begin monster AI implementation
	- note to mayur: go through entity stuff and see how it all works
- make the display screen
	- either of us can do this

9/16/2024
- (vivek) combat now mostly works
	- need to configure bombs and AOE effects and other weird weapon shapes (X, spiral, etc.) works
- (mayur) set up monster AI 
	- start out with simple AI 
- (mayur or vivek) make a simple display working 
	- when not in combat, put stats for current character
	- when in combat, but stats for item on map tile
- (vivek) use oldcode stuff to get a pause menu, title menu, and a game win / game over screen
- figure out how to process damage and make things die

7/4/25

- (vivek)
	- coded a new algorithm to create biomes in C++
		- will make biomes smoother
		- generates a heat map that can then generate biomes
		- first generates hotspots, then calculates an influence based on the formula sum(strength / (dist * number_of_hotspots)) for every hotspot and indice is able to generate a map
	- next steps for biomes
		- incorporate the algorithm into js and make it work with existing codebase (ASAP)
		- lava, shadow, and poison biomes shouldn't rly be included in the heat map so work on making a seperate algorithm for it

Jobs
- vivek
	- biomes
		- test all 3 and decide which is best
- mayur
	- mob AI
	- rooms
- nicki
	- story
	- armor and items (maybe vivek too?)
	- music (maybe vivek too?)
- All 3
	- pause screens and menus
	- interacting
	
7/6/25
- (vivek)
	- coded the new algorithm in js
		- after extensive debugging it seems to be working and rendering fine
	- potential problems and adjustments
		- biomes are much smaller
			- maybe make more intermediate biomes (for example there are 2 plains and 2 oceans, maybe have this for other biomes too?)
			- maybe change the formula into sum(strength / ((dist + 1) * number)) idk but maybe change it into something that yields smoother results
		- the heat values for biomes are all working
			- even after adjusting them myself they are rly weird and not right at all
			- we could use real life existing data for biomes and could consider adding more biomes to make the terrain even more realistic
		- the shadow, lava, and poison aren't rly being included properly rn because having a heat map val for them would be kind of weird
- future plans/next steps
	- implement a new algorithm to add the three cool biomes (lava, shadow, and poison) into the terrain (maybe look to add these specifically around or in dungeons?)
	- continue adjusting biome algorithm constants until looks more realistic
	- when Anna(Mayur) comes back maybe schedule with Nikki to meet up and talk abt game design?

7/12/25
- (vivek)
	- coded the new new algorithm for biome generation (to minimize the distance between hotspot and index)
	- it works pretty well and generates somewhat natural terrain	
	- for custom worlds there are many constants
- future plans/next steps
	- use new eccentricity function to add more unique and realistic shape too biomes

7/13/25
- (vivek)
	- expanded upon the algorithm from yesterday
		- wrote a function to find the eccentricity value for any given biome
		- added mountain ranges and rivers as well as more realistic terrain Overall
- future plans/next steps
	- for biomes
		- find best eccentricity values for each biome through testing
		- maybe add a noise function to add randomness to biomes(?)
		- maybe add more biomes to smoothen out the map a little
		- go through and rework some of the biome textures
	- overall
		- after biome stuff is done start thinking about entity mechanics and turn ending mechanics as those systems are lacking so far

7/25/25
- (mayur)
- Bit of a late update
- Vivek fixed up some bugs in combat mechanics, so that monsters can now disappears
- Nikki gave me a rough sketch of how the plot will look and what culture each region will be based on 
- I wrote up some code which can be used to create dungeons
	- the dungeons will be the same for each save file, but the mazes will be randomly generated 
- The vis_updated file NEEDS to be organized (probably into multiple files)
	- this is the only way that I think multiple rooms can be implemented
	- it is also necessary to make it clearer where to put the monster section
- I am currently going to work on display screens so that the game looks a bit clearer overall.

7/26/25
- (mayur)
- wrote a wrapper class so that exported variables could be updated in other files 
	- this was pretty important for organizing the vis_updated file into 2 files
		- one initializes and sets up the game, the other gives all of the keyboard bindings 
- I also organized the entire repository, so that it made more sense
- I sorted vis_updated, so that it is much shorter, and ideally, more readible (although that might still take work)

7/30/25
- (mayur)
- I updated the area code a bit but the game doesn't actually implement it yet
	- for it to be implemented requires having doors work properly
	- we need vis_updated and sight to be called a bit differently then
	- it should work, but it just hasn't been done yet 
- we also need to udpate room generation
	- they should be the size, shape, and location we want
	- they should also either connect to another area or just be an empty area of the map
- I made a full dungeon, I think it looks pretty cool
	- we'll need like ... 25 more 
- i designed a multiplayer that we can implement without as much difficulty as I thought 
	- it will require having socket io set up (but there's already a template for it online)
- I will start working on monster AI currently, since once that is ready, what we have right now will be playable

Things to do 
- monster AI 
- room update
- area implementation
- door implementation
- dungeon creator
- multiplayer
- different weapons
- weapons for monsters and how they do damage

- need to fine tune the turn set-ups


- nikki stuff

I also double checked how electron works, and it will be compatible with HTML, so we will use that for extra screens
we will use PIXI for specific things still though, like things that need extra animation

8/1/25
- wrote up some monster AI stuff
- we need it so that monsters can't go into rooms
	- this shouldn't be super difficult, just need to have A* not allowed going into those indices
- i also made working health bars and made the monsters only seek out players which are seen and have positive health

- should we have it so that the player has a chance to react to the monster about to hit you like in into the breach? 
- or should have we have it so that the combat is just done after the monster has a chance to move? 
	- the into the breach case is primarily difficult because there are things to protect
	- it would likely be way easier in this sort of set up, where you just have to fight the monsters 
		- so the difficulty would only occur if there are MANY monsters to deal with 

- at this point, once we have the patrol AI working, we have a playable beta to show people :) 

TO DO:
- I would still need to add more complex AIs to the game 
- work on different screens for the game (HTMl ugh)
	- need a main screen 
	- need a small screen showing the selector
	- need a chest-opening screen
- implement how areas work 
- implement how doors work
- improve how rooms work
	- they need to be MUCH more customizable
	- prevent things from going into the rooms every
- update how mazes work
	- they should be solvable without going into the rooms 
	- then they shoudl have multiple paths 
		- this is easier; just intersect 2 mazes on top of each other :)
		- also include the randomness factor
- I also updated how the screen works using some CSS / HTML so that it all looks a lot nicer

- if you can get this on a site, then you can show it to Nikki and others as to what you have :)

- start working on weapons 
- start working on armor 
- start working on biome effects

- start working on multiplayers


8/2/25 
- (mayur)
- patrol AI now works 
- need to fix the wall-check function and then can do direction based (rather than A* based) movement for monsters
- this gives a mostly complete working beta for the game 
	- need to double check how player damage works still 

- once the function above works, the game will have 3+ working AIs
	- they are the hunting brain, the patrol brain, and a hunt then flee brain

- after that last edit is done
- tasks to do:
	- get this stuff onto the github site to show people more easily :) 
	- screen stuff
		- some HTML stuff for a main menu, pause, controls, etc
		- some PIXI for selector screens, inventory, chests, etc
	
	- start work on multiplayer 
		- only do this after you have a site though

	- item and entity stuff
		- start up armor
		- start up biome effects
		- start up weapons

	- map updates
		- implement areas
		- implement doors
		- update rooms
		- update mazes

8/3/25 
- (mayur)
- have working 'sniff', 'patrol', 'flee', and 'hunt' AIs
	- sniff just goes in the _direction_ of the closest player
		- it can get stuck behind walls and stuff like that
	- patrol walks between a pre-determined path
		- if a player gets close, the monster goes towards them 
		- if a player runs away, the monster goes back to its patrol path
	- hunt uses A* to go towards the nearest player 
	- flee is like hunt until its health gets low and it uses some of sniff to run away

- still have to do all of these things mentioned yesterday
- tasks to do:
	- get this stuff onto the github site to show people more easily :) 
	- screen stuff
		- some HTML stuff for a main menu, pause, controls, etc
		- some PIXI for selector screens, inventory, chests, etc
	
	- start work on multiplayer 
		- only do this after you have a site though

	- item and entity stuff
		- start up armor
		- start up biome effects
		- start up weapons

	- map updates
		- implement areas
		- implement doors
		- update rooms
		- update mazes

8/4/2025
- spoke with Nikki about the game 
	- gave me a better grasp of how the characters will work 
	- I will probably help with doing some of the artwork for either characters or monsters
	- also gave me a vision for our current priorities

- got everything onto a github site 
	- https://mayursharma35711.github.io/Labyrinth2D/
	- only thing that needs to be changed to make this run w/ npc is the following
	- replace ../textures with https://mayursharma35711.github.io/Labyrinth2D/textures
	- then everything will work :) 

- Current priorities
	- item and entity stuff
		- start up armor
		- start up biome effects
		- start up weapons

	- map updates
		- implement areas
		- implement doors
		- update rooms
		- update mazes
	
	- screen stuff
		- some HTML stuff for a main menu, pause, controls, etc
		- some PIXI for selector screens, inventory, chests, etc


	- multiplayer is a later concern
	- (FINISHED) there is a small bug in the position of the monster it looks like
		- it will show up randomly in the beginning of the game 
		- may or may not show up properly within sight function
		- this might be affecting whether or not it takes damage correctly
	
	- just need to work on room stuff right now to get a playing demo I think
	- things to add after talking to Nikki
		- have it flash on screen if a character is about to leave the seen_indices area
			- this is not super hard, get the 4 adjacent squares and check if they're in seen_indices
			- then have an oscillating colored square show up around the square if it does
		- add in a controls page in the pause menu or have something like that somewhere

8/5/25
- (FINISH) need to fix warning system still 
- screen stuff (put in a controls list)
- map updates
	- implement areas
	- implement doors
	- update rooms
	- update mazes
- maybe do some drawing too

8/6/25
- warning system works now
- rooms have been updated to be customizable
- need to implement areas
- need to implement doors
- need to update path finding and the maze so they are solvable without going into rooms!

- need to implement more weapons
- need to implement armor

- there's a bug in room and maze configs
	- there are areas which aren't able to be reached. it needs to be fixed somehow

- Current progress after today
	- warning system works
	- rooms are fully customizable and have doors which need to be opened by hitting e
	- path finding and the maze work without having to go through rooms
	- also have it so that monsters should be 'mostly' able to see that they are in each other's way

- things to work on next
	- implementing areas with doors so that you move between locations
	- implement armor
	- implement weapons
	- implement screen
	- I'm going to leave this part for vivek mostly now haha 

8/7/25
- Next things to do 
	- implementing areas with doors so that you move between locations
	- implement armor
	- implement weapons
	- implement screen
	- there might be a bug when players go into a region that monsters can't access
		- they should have an idle thing that they should know to do

8/12/25
- (mayur)
- gave vivek a list of things to do 
- added new sprites
- now have pop up screens for when chests are opened 

- still to do 
	- implement armors
	- implement weapons
	- need to create main menu, inventory, and some other screens 
- vivek's Jobs
	- he needs to get the areas stuff working 