8/2/2024 
- Here we will put our progress and changes for each file (preferably in as much detail as would be helpful)
- Set up the Github repository and worked out the old Github commands
- Found the old code Calvin had worked on for setting up, so going to read through that and set it up on my own later to have ways to connect multiple people together. He likely won't mind if I grab some old aspects of it, but I'll probably double check with him anyway. 
- Added an ideas file, that I left somewhat organized.
- Spoke more in-depth with Calvin to see what his thoughts were
	- Made point that if we want to learn use C++, if we want to make a game, use Unity (scripts are in C#)
	- Also, game dev life is long and hard

(Mayur's Opinion): Let's shoot for C++. both of us already mostly know the language (i definitely have some kinks i need to work out, but I generally know the language). It will be a better learning experience, there's some overhead to learn when it comes to packages, but the skills we pick up will probably be more reusable compared to Unity (unless you're planning on becoming a game dev). Once we learn some basic graphics, the first version of the simulated game is already more or less ready as well, so it's an easy start in that regard. 
In a sense, we can learn interesting algorithms and packages and memory structures while also constantly making interesting progress that should be able to continuously build, unlike something where we know less.

8/3/2024 
- Vivek has now set up GitHub. 
- I have also set up index html file on my computer. 
- We discussed the idea with appa as well, and doing it with JS seems like the least irritating way to do things, considering we care more about learning algorithms and basic graphics than doing a bunch of nonsensical garbage.

- Got the node, npm, and http-server to all work (npx http-server for Vivek).
- To run everything, we need to first install http-server through npm to localhost things
- After we run the local host, server, it will run the index.html file in the associated directory immediately
- This will help us actually run the pixijs file, which otherwise won't work.

- the command we actually have to run is npx http-server -c-1
- this prevents the data from caching so changes can be made

8/3/2024 (night)
- Had merge issues which took ~1 hour to solve. 
- all following algorithms have variable length, width
- Created biome generation using random walk algorithm (vivek)
	- number of biomes is variable and fills in background with plains
- fixed graphics from old code (mayur)
	- can change color of each square independently and tinker with size of squares and size of fitting into computer screen
	- (CONCERN) need to make sure that having this many objects doesn't slow things down
- maze generation using random DFS algorithm to visit every cell (mayur)

- next steps 
	- fix the dependencies issue (vivek)
	- once this works, we can make the background graphics quickly (mayur)
		- see how efficient / fast this is, if slow, have problem
	- start character + equipment design and art (vivek)
8/4/24 (basement)
- Fixed dependencies
	- https://stackoverflow.com/questions/950087/how-do-i-include-a-javascript-file-in-another-javascript-file
	- make all .js files .mjs except the main file then, from the .mjs export the functions you want 
	- to use in the main function. To import use "import {somefunction} from "./somefile.mjs"
- Fixed graphics for biome generation
	- Talked about Long term game dev with respect to amount of objects rendered
- Fixed graphics for maze generation

- next steps
	- start game loop
	- figure out how to implement visibility
	- make a tile object (gives position, is visited (maybe?), biome, walls, etc.)
	- use this to make a map array of tile objects, which is easy to implement visibility 
		- using current position -> can get index of map array tile 
		- map array tile has biome info and wall info
		- from this get visibility info
8/5/24
- Wrote classes for player and monster
	- Implemented basic graphics for monsters and player
	- Start pos for player is in corner, monsters spawn randomly
	- Most functions have been written and have not been tested
		- All funcitons for Entities are in class Entities which is inherited by class Player and class Monsters
		- Functions include (dealDamage, takeDamage, setPos, setSpeed...)
- next steps
	- start game loop
	- make a tile object and a wall object (different)
		- using current position -> can get index of map array tile
		- from that figure out visibility (probably just range but not obstructed by walls)
	- start generating textures for biomes, players etc.

8/6/24
- Created a tile class, made map into a tile array that every function uses now 
- Put all of the biome generation into a single file that gives just a map array 
	- this effectively means we don't need map_classes, since mapgen.mjs gives all the map information
- Created a tileWall class, made walls into a tile array that every function uses now
- put all of the maze generation into a single file as well, so that should also be doesn
- all classes used for backgrounds are only instantiated in their file and so importing is unnecessary
	- the function that creates the objects is all that is required.

- side idea: if a cell has 3 walls, give it a chance to have a treasure

- next immediate steps
	- sprites and textures (monsters, players, equipment, and background)
	- update loop (movement, monster movement, screen size change)
	- keyboard input 
- steps afterwards
	- path finding for monsters / AI players
	- visibility 
	- creating equipment & statistics
	- create chests & rooms